/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package jp.simplecode.InvertCameraModule;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;
import org.appcelerator.kroll.common.Log;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.ExifInterface;

@Kroll.module(name="Invertcameramodule", id="jp.simplecode.InvertCameraModule")
public class InvertcameramoduleModule extends KrollModule
{
    // Standard Debugging variables
    private static final String TAG = "InvertcameramoduleModule";

    // You can define constants with @Kroll.constant, for example:
    // @Kroll.constant public static final String EXTERNAL_NAME = value;
    
    public InvertcameramoduleModule()
    {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app)
    {
        Log.d(TAG, "inside onAppCreate");
        // put module init code that needs to run when the application is created
    }

    // Methods
    @Kroll.method
    public String example()
    {
        Log.d(TAG, "example called");
        return "hello world";
    }
    
    // Properties
    @Kroll.getProperty
    public String getExampleProp()
    {
        Log.d(TAG, "get example property");
        return "hello world";
    }
    
    @Kroll.setProperty
    public void setExampleProp(String value) {
        Log.d(TAG, "set example property: " + value);
    }

    @Kroll.method
    public TiBlob rotateImage(String filePath){
        filePath = filePath.replace("file://", "");
        int degree = getRotateDegree(filePath);
        OutputStream out = null;
        Bitmap bitmap = null;
        Bitmap rotatedImage = null;
        TiBlob blob = null;
        try {
            if (degree > 0) {
                Matrix mat = new Matrix();
                mat.postRotate(degree);
                BitmapFactory.Options opts = new BitmapFactory.Options();
                opts.inJustDecodeBounds = true;
                BitmapFactory.decodeFile(filePath, opts);
//                int width = 480;
                int scale = 1;
//                if (opts.outWidth > width) {
//                    scale = opts.outWidth / width + 2;
//                }
                opts.inJustDecodeBounds = false;
                opts.inSampleSize = scale;
                bitmap = BitmapFactory.decodeFile(filePath, opts);
                rotatedImage = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), mat, true);
                out = new FileOutputStream(filePath);
                rotatedImage.compress(Bitmap.CompressFormat.JPEG, 100, out);
                blob = TiBlob.blobFromImage(rotatedImage);
                bitmap.recycle();
                rotatedImage.recycle();
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return blob;
    }

    @Kroll.method
    private int getRotateDegree(String filePath){
        int degree = 0;
        try {
            ExifInterface exifInterface = new ExifInterface(filePath);
            int orientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);
            if (orientation == ExifInterface.ORIENTATION_ROTATE_90) {
                degree = 90;
            } else if (orientation == ExifInterface.ORIENTATION_ROTATE_180) {
                degree = 180;
            } else if (orientation == ExifInterface.ORIENTATION_ROTATE_270) {
                degree = 270;
            }
            if (degree != 0) {
                exifInterface.setAttribute(ExifInterface.TAG_ORIENTATION, "0");
                exifInterface.saveAttributes();
            }
        } catch (IOException e) {
            degree = -1;
            e.printStackTrace();
        }
        return degree;
    }
}
